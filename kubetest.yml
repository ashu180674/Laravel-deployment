apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubetest.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: nginx
    name: nginx
  spec:
    ports:
    - name: "8000"
      port: 8000
      targetPort: 80
    selector:
      io.kompose.service: nginx
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubetest.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: phpmyadmin
    name: phpmyadmin
  spec:
    ports:
    - name: "3400"
      port: 3400
      targetPort: 80
    selector:
      io.kompose.service: phpmyadmin
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubetest.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: app
    name: app
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: app
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubetest.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/travellist: "true"
          io.kompose.service: app
      spec:
        containers:
        - image: testing:v1
          imagePullPolicy: "Never"
          name: travellist-app
          resources: {}
          volumeMounts:
          - mountPath: /var/www
            name: app-claim0
          workingDir: /var/www/
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: app-claim0
          persistentVolumeClaim:
            claimName: app-claim0
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: app-claim0
    name: app-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: travellist
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/travellist: "true"
    podSelector:
      matchLabels:
        io.kompose.network/travellist: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubetest.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: db
    name: db
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: db
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubetest.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/travellist: "true"
          io.kompose.service: db
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
          - name: MYSQL_PASSWORD
          - name: MYSQL_ROOT_PASSWORD
          - name: MYSQL_USER
          - name: SERVICE_NAME
            value: mysql
          - name: SERVICE_TAGS
            value: dev
          image: mysql:8.0
          imagePullPolicy: ""
          name: travellist-db
          resources: {}
          volumeMounts:
          - mountPath: /docker-entrypoint-initdb.d
            name: db-claim0
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: db-claim0
          persistentVolumeClaim:
            claimName: db-claim0
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: db-claim0
    name: db-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: travellist
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/travellist: "true"
    podSelector:
      matchLabels:
        io.kompose.network/travellist: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubetest.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: nginx
    name: nginx
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: nginx
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubetest.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/travellist: "true"
          io.kompose.service: nginx
      spec:
        containers:
        - image: nginx:alpine
          imagePullPolicy: ""
          name: travellist-nginx
          ports:
          - containerPort: 80
          resources: {}
          volumeMounts:
          - mountPath: /var/www
            name: nginx-claim0
          - mountPath: /etc/nginx/conf.d/
            name: nginx-claim1
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: nginx-claim0
          persistentVolumeClaim:
            claimName: nginx-claim0
        - name: nginx-claim1
          persistentVolumeClaim:
            claimName: nginx-claim1
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: nginx-claim0
    name: nginx-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: nginx-claim1
    name: nginx-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: travellist
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/travellist: "true"
    podSelector:
      matchLabels:
        io.kompose.network/travellist: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubetest.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: phpmyadmin
    name: phpmyadmin
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: phpmyadmin
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubetest.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/travellist: "true"
          io.kompose.service: phpmyadmin
      spec:
        containers:
        - image: phpmyadmin/phpmyadmin
          imagePullPolicy: ""
          name: phpmyadmin
          ports:
          - containerPort: 80
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: travellist
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/travellist: "true"
    podSelector:
      matchLabels:
        io.kompose.network/travellist: "true"
kind: List
metadata: {}

